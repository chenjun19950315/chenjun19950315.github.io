//实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返
//回栈中最小元素的操作。
//【要求】
//1．pop、push、getMin操作的时间复杂度都是O(1)。
//2．设计的栈类型可以使用现成的栈结构
class new_stack {
private:
	stack<int> datas;
	stack<int> mins;
public:
	bool empty();
	void push(int data);
	void pop();
	int top();
	int min_value();
};
bool new_stack::empty()
{
	return datas.empty();
}
void new_stack::push(int data)
{
	datas.push(data);
	if (mins.empty())
		mins.push(data);
	else {
		if (data < mins.top())
			mins.push(data);
		else
			mins.push(mins.top());
	}

}
void new_stack::pop()
{
	datas.pop();
	mins.pop();
}
int new_stack::top()
{
	return datas.top();
}
int new_stack::min_value()
{
	return mins.top();
}
int main()
{
	
	new_stack s;
	s.push(4);
	s.push(5);
	s.push(3);
	s.push(6);
	s.pop();
	s.pop();
	s.pop();
	cout << s.top() << " " << s.min_value() << endl;
	return 0;
}
