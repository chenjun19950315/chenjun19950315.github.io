//计算一个字符串的最长的相等的前缀和后缀,优化版本
vector<int> getNextArray1(const string& s)
{
	if (s.length() == 0)
		throw ("string length must >=1");
	if (s.length() == 1)
		return{ -1 };
	vector<int> next(s.length()+1, 0);//初始化next数组为0
	next[0] = -1;//第一个字符没有前缀
	next[1] = 0;
	int cn = 0;
	int i = 2;
	while (i<=s.length()) {
		if (s[cn] == s[i - 1]) {
			next[i++] = ++cn;
		}
		else {
			if (cn >0)
				cn = next[cn];
			else
				next[i++] = 0;
		}
	}
	return next;
}
string maxTwoString(const string& s)
{
	vector<int> next = getNextArray1(s);
	
	for (auto a : next)
		cout << a << endl;
	string result;
	
	return s + s.substr(next[s.length()]);
}
int main()
{
	string s = "adba";
	cout << maxTwoString(s) << endl;

	return 0;
}
