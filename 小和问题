shared_ptr<vector<int>> generateRandomArray(int size, int value)
{
	uniform_int_distribution<unsigned> u1(0, size);
    uniform_int_distribution<unsigned> u2(0, value);
	default_random_engine e(time(0));
	int n = u1(e);
	shared_ptr<vector<int>> arr = make_shared<vector<int>>(n);
	for (int i = 0; i <n; i++)
		(*arr)[i]=u2(e) - u2(e);
	
	return arr;
}
shared_ptr<vector<int>> copyArray(shared_ptr<vector<int>> old)
{
	if ((*old).size() == 0)
		return nullptr;
	shared_ptr<vector<int>> newArray = make_shared<vector<int>>(old->size());
	for (int i = 0; i < old->size(); ++i)
		(*newArray)[i]=((*old)[i]);
	return newArray;
	
}
bool isEqual(shared_ptr<vector<int>> p1, shared_ptr<vector<int>> p2)
{
	if ((*p1).size() != (*p2).size())
		return false;
	else {
		for (int i = 0; i < p1->size(); ++i)
		{
			if ((*p1)[i] != (*p2)[i])
				return false;
		}
		return true;
	}
}
void printArray(shared_ptr<vector<int>> arr)
{
	for (auto it = arr->begin(); it != arr->end(); it++)
		cout << *it << " ";
	cout << endl;
}
int rightMathod(shared_ptr<vector<int>> arr)
{
	if (arr->size() <= 1)
		return 0;
	int sum = 0;
	auto begin = arr->begin();
	auto end = arr->end();
	//sort(begin, end);
	for(auto it=begin;it!=end-1;it++)
		for (auto it1 = it + 1; it1 != end; it1++)
		{
			if (*it < *it1)
				sum = sum + *it;
		}
	return sum;
}
int merge(shared_ptr<vector<int>> arr, shared_ptr<vector<int>> help, int l, int mid,int r)
{
	int sum=0;
	int p = l;
	int p1 = l;
	int p2 = mid + 1;
	while (p1 <= mid &&p2 <= r)
	{
		if ((*arr)[p1] < (*arr)[p2])
		{
			sum = sum + (*arr)[p1]*(r-p2+1);
			(*help)[p++] = (*arr)[p1++];
		}
		else
			(*help)[p++] = (*arr)[p2++];
	}
	while(p1<=mid)
		(*help)[p++] = (*arr)[p1++];
	while(p2<=r)
		(*help)[p++] = (*arr)[p2++];
	for (int i = l; i <= r; i++)
		(*arr)[i] = (*help)[i];
	return sum;
}
int mergeSort(shared_ptr<vector<int>> arr, shared_ptr<vector<int>> help,int l,int r)
{
	if (l == r)
		return 0;
	int mid = l + ((r - l) >> 1);
	return mergeSort(arr, help, l, mid)+mergeSort(arr, help, mid + 1, r)+merge(arr, help, l, mid, r);
}
int smallSum(shared_ptr<vector<int>> arr)
{
	shared_ptr<vector<int>> help = make_shared<vector<int>>(arr->size());
	if (arr->size() <= 1)
		return 0;
	return mergeSort(arr, help, 0, arr->size() - 1);
}
int main()
{
	int sum1 = 0;
	int sum2 = 0;
	bool succeed = true;
	shared_ptr<vector<int>> p;
	shared_ptr<vector<int>> p1;
	shared_ptr<vector<int>> p2;
	p = generateRandomArray(20, 200);
	p1 = copyArray(p);
	p2 = copyArray(p);
	shared_ptr<vector<int>> help = make_shared<vector<int>>(p1->size());
	sum1=rightMathod(p);
	sum2= smallSum(p1);
	for (int i = 0; i < 1000000; ++i)
		if(sum1!=sum2)
		{
			succeed = false;
			for (auto it = p2->begin(); it != p2->end(); it++)
				cout << *it << " ";
			cout << endl;
			break;
		}
	string s = succeed ? "pass" : "false";
	cout <<s << endl;

	return 0;
}
