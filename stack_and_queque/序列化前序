void SplitString(const string& s, vector<string>& v, const string& c)  //切割字符串函数，按给定的字符
{
	string::size_type pos1, pos2;
	pos2 = s.find(c);
	pos1 = 0;
	while (string::npos != pos2)
	{
		v.push_back(s.substr(pos1, pos2 - pos1));

		pos1 = pos2 + c.size();
		pos2 = s.find(c, pos1);
	}
	if (pos1 != s.length())
		v.push_back(s.substr(pos1));
}
string serialByPre(BinTree bt)
{
	if (bt == nullptr)
		return "#_";
	char c = char(bt->data + '0');  //因为二叉树结构的数据是int，所以要转换成string
	char c1[] = { c,0 };
	string res = c1;
	res += "_";
	res += serialByPre(bt->left);
	res += serialByPre(bt->right);
	return res;
}

int main()
{
	//string s = "a_b_c_#_e_f_";
	//vector<string> v;
	//SplitString(s, v, "_"); //可按多个字符来分隔;
	//for (vector<string>::size_type i = 0; i != v.size(); ++i)
	//	cout << v[i] << " ";
	//cout << endl;
	//输出: a b c d e f

	BinTree BT = createBinTree();
	string s;
	s = serialByPre(BT);
	LevelorderTraversal(BT);
	cout << s << endl;
	return 0;
}
