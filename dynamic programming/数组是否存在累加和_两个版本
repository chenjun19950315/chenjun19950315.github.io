//给你一个数组arr，和一个整数aim。如果可以任意选择arr中的数字，能不能累加得到aim，返回true或者false
//暴力出所有结果，最后判断最终的结果中是否有与aim相等的数
bool isSum(const vector<int>& arr, int pos, int sum, int aim)
{
	if (pos == arr.size() - 1)  
		return aim == sum;
	return isSum(arr, pos + 1, sum, aim) || isSum(arr, pos + 1, sum + arr[pos], aim);
}
//动态规划
bool isSum1(const vector<int>& arr, int pos, int sum, int aim)
{
	int newArryCol = 0;
	int newArryRow = arr.size();
	for (const auto &a : arr)
		newArryCol += a;
	bool newArray[100][100] = { 0 };
	for (int i = 0; i <= newArryCol; i++)
		newArray[newArryRow][i] = false;
	newArray[newArryRow][aim] = true;
	for(int i=newArryRow-1;i>=0;i--)
		for (int j = 0; j <= newArryCol; j++) {
			if(j<=aim){
			if (newArray[i + 1][j + arr[i]] == true || newArray[i + 1][j]==true)
				newArray[i][j] = true;
			else
				newArray[i][j] = false;
			}
			else
				newArray[i][j] = false;
		}
	return newArray[0][0];
}
int main()
{
	vector<int> arr = { 3,7,9,1,5};
	cout << isSum(arr,0,0,13) << endl;
	cout << isSum1(arr, 0, 0, 13) << endl;
	return 0;
}
