//注意会有大小，溢出的问题，用int类型，会溢出，要用long long,由归并排序的思想（分治）而来，包括逆序对，小和问题
class Solution {
public:
 long long InversePairs(vector<int> data) {
        vector<int> help(data);
		if (data.size() <= 1)
			return 0;
        long long sum = mergeSort(data, help, 0, data.size() - 1);
		return ( sum% 1000000007);
    }
   long long merge(vector<int> &arr, vector<int> &help, int l, int mid, int r)
{
	long long sum = 0;
	int p = l;
	int p1 = l;
	int p2 = mid + 1;
	while (p1 <= mid &&p2 <= r)
	{
		if (arr[p1] <=arr[p2])   //如果左边数组的某个数left1小于右边数组的某个数right1，则left++
			help[p++] = arr[p1++];
		else
		{
			sum = sum + (mid - p1 + 1);//如果左边数组的某个数left1大于右边数组的某个数right1，则从左数组这个数开始到结束的所有数都与右数组这个数构成逆序
      //right++
			help[p++] = arr[p2++];
		}
	}
	while (p1 <= mid)
		help[p++] = arr[p1++];
	while (p2 <= r)
		help[p++] = arr[p2++];
	for (int i = l; i <= r; i++)
		arr[i] = help[i];
	return sum;
}
long long mergeSort(vector<int> &arr, vector<int> &help, int l, int r)
{

	if (l >= r)
		return 0;
	int mid = l + ((r - l) >> 1);
	return mergeSort(arr, help, l, mid) + mergeSort(arr, help, mid + 1, r) + merge(arr, help, l, mid, r);
}
};
