//马拉车算法应用:给定一个字符串，只能在字符串后面添加字符，使整个串变成回文串，保证添加的字符最短 
//思路：保证在包含最后一个字符的情况下，求出最长回文序列的长度，前面不是的字符串，逆序加到最后
string	palindromic_sequence(string &arr)
{
	string orgin_arr = arr;//保存原始字符串
	addSpecialChar(arr);
	int c = -1;
	int r = -1;

	int parr[100] = { 0 };//字符串长度不超过100
	int size = arr.length();

	for (int i = 0; (i <size); i++) {
		parr[i] = r > i ? min(parr[2 * c - i], r - i) : 1;

		while (i + parr[i] < arr.length() && i - parr[i] >= 0) {
			if (arr[parr[i] + i] == arr[i - parr[i]])
				parr[i]++;
			else
				break;
		}
		if (parr[i] + i > r) {
			r = parr[i] + i;
			c = i;
		}
		if (r == size)//如果达到最后一个字符结束
			break;
	}

	int residual = c - parr[c];//计算出逆序的字符的位置
	for (int i = residual; i >= 0; i--) {  //逆序
		if (arr[i] == '#')
			continue;
		else
			orgin_arr = orgin_arr + arr[i];
	}

	return orgin_arr;
}
int main()
{

	string s = "acb12381";
	cout<< palindromic_sequence(s)<<endl ;

	return 0;
}
