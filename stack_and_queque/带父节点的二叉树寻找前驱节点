//树结构
//二叉树，带父节点，链式存储
typedef int TreeElementType;
typedef struct TNode1* BinTree1;
struct TNode1 {
	TreeElementType data;
	BinTree1 left;
	BinTree1 right;
	BinTree1 parent;
};
//创建带父节点的二叉树
BinTree1 createBinTree1()
{
	BinTree1 BT = new TNode1;
	
	queue<BinTree1> q;
	TreeElementType data;
	cin >> data;
	if (data != 0)
	{
		BT->data = data;
		BT->left = BT->right =BT->parent= nullptr;
		q.push(BT);
		
	}
	else
		return nullptr;
	while (!q.empty())
	{
		BinTree1 t = new TNode1;
		t = q.front();
		q.pop();
		
		cin >> data;
		if (data == 0)
			t->left = nullptr;
		else {
			t->left = new TNode1;
			t->left->data = data;
			t->left->left = t->left->right = nullptr;
			t->left->parent = t;
			q.push(t->left);
		}

		cin >> data;
		if (data == 0)
			t->right = nullptr;
		else {
			t->right = new TNode1;
			t->right->data = data;
			t->right->left = t->right->right = NULL;
			t->right->parent = t;
			q.push(t->right);
			
		}

	}
	return BT;
}
//寻找前驱节点优化版本，不需要遍历整个二叉树，只需要遍历很少几个节点
//视频：5，1:06:,思路:根据后继的性质分为两种情况，情况一:如果该节点有左子树，则该左子树的最右节点
//情况二:如果该节点没有左子树，则寻找离其最近的父节点（该节点是在父节点的右子树上）
BinTree1 findFrontNode1(BinTree1 bt)
{
	BinTree1 root = bt;
	if (bt == nullptr)
		return nullptr;
	//情况一
	if (bt->left != nullptr)
	{
		bt = bt->left;
		while (bt->right != nullptr)
			bt = bt->right;
		return bt;
	}
	//情况二
	else {
		while (bt->parent != nullptr)
		{
			root = bt->parent;
			if (root->right == bt)
				return root;
			else
				bt = root;
		}
		return nullptr;
	}
	
	//找到父节点
	while (root->parent != nullptr)
		root = root->parent;
	//根据父节点和当前节点寻找后继节点
	return orderTraversal_find(root, bt);

}
int main()
{
	BinTree1 BT = createBinTree1();
	BinTree1 b = BT->left->left;

	if (findFrontNode1(b) == nullptr)
		cout << "no successor:" << endl;
	else
		cout << "successor is :" << findFrontNode1(b)->data << endl;

	return 0;
}
