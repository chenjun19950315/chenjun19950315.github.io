//序列化前序

string serial(BinTree bt)
{

	if (bt == nullptr)
		return "#_";
	string result;
	int cur = bt->data;
	//将int转化为string型
	string cur_string = to_string(cur);
	cur_string += "_";
	result += cur_string;
	result+=serial(bt->left);
	result+=serial(bt->right);
	return result;
}

BinTree reorder(queue<string>& que)
{
	string cur = que.front();
	que.pop();
	if (cur == "#")
		return NULL;
	stringstream ss;
	ss << cur;
	int curValue;
	ss >> curValue;
	BinTree root = new TNode;
	root->data = curValue;
	root->left = reorder(que);
	root->right= reorder(que);
	return root;
}
BinTree deSerialization(string str)
{
	queue<string> que;
	for (int i = 0; i < str.size();++i ) {
		string t;
		while (str[i] != '_') {
			t = t + str[i];
			++i;
		}
		que.push(t);
	}
	return reorder(que);
}return  reorder(q);
}

int main() {
	BinTree bt = createBinTree();
	
	string s = serial(bt);
	BinTree bt1=deSerialization(s);
	LevelorderTraversal(bt1);

	return 0;
}
