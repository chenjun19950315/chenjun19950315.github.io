//计算一个字符串的最长的相等的前缀和后缀,
vector<int> getNextArray(const string& s)
{
	if (s.length() == 0)
		throw ("string length must >=1");
	vector<int> next(s.length(),0);//初始化next数组为0
	int len = 0;//记录每个字符的最长的相等的前缀和后缀
	next[0] = -1;//第一个字符没有前缀
	for (int i = 1; i < s.length(); i++) {
		if (i == 1)
		{
			next[i] = 0;
			continue;
		}
		for (len = 1; len < i; len++) {
			if (stringIsEqual(s,0, i - len, len))
				next[i] = len;
		}
	}
	return next;
}
//计算一个字符串的最长的相等的前缀和后缀,优化版本
vector<int> getNextArray1(const string& s)
{
	if (s.length() == 0)
		throw ("string length must >=1");
	if (s.length() == 1)
		return{ -1 };
	vector<int> next(s.length(), 0);//初始化next数组为0
	next[0] = -1;//第一个字符没有前缀
	next[1] = 0;
	int cn = 0;
	int i = 2;
	while (i<s.length()) {
		if (s[cn] == s[i - 1]) {
			next[i++] =++cn;
		}
		else {
			if (cn >0)
				cn = next[cn];
			else
				next[i++] = 0;
		}
	}
	return next;
}
int KMP(const string& s1,const string& s2)
{
	vector<int> next = getNextArray1(s2);  //根据字符串的最长的相等的前缀和后缀的信息加速查找的过程
	int i1 = 0;
	int i2 = 0;
	while (i1 < s1.length() && i2 < s2.length()) {
		if (s1[i1] == s2[i2])//如果两个字符匹配，两个指针++
		{
			i1++;
			i2++;
		}
		else {
			if (next[i2] == -1)//如果next==-1，说明到了s2的第一个字符串，且不相等，则i1++
				i1++;
			else
				i2 = next[i2];//如果next!=-1,直接跳到next指的地方即可，具体见进阶班
		}
	}
	return (i2 == s2.length() ? (i1 - s2.length()) : -1);
}
int main()
{
	string s = "tbtbctbtbtk";
	string s1 = "btk";
	cout << KMP(s, s1) << endl;


	return 0;
}
