//树结构
//二叉树，带父节点，链式存储
typedef int TreeElementType;
typedef struct TNode1* BinTree1;
struct TNode1 {
	TreeElementType data;
	BinTree1 left;
	BinTree1 right;
	BinTree1 parent;
};
//创建带父节点的二叉树
BinTree1 createBinTree1()
{
	BinTree1 BT = new TNode1;
	
	queue<BinTree1> q;
	TreeElementType data;
	cin >> data;
	if (data != 0)
	{
		BT->data = data;
		BT->left = BT->right =BT->parent= nullptr;
		q.push(BT);
		
	}
	else
		return nullptr;
	while (!q.empty())
	{
		BinTree1 t = new TNode1;
		t = q.front();
		q.pop();
		
		cin >> data;
		if (data == 0)
			t->left = nullptr;
		else {
			t->left = new TNode1;
			t->left->data = data;
			t->left->left = t->left->right = nullptr;
			t->left->parent = t;
			q.push(t->left);
		}

		cin >> data;
		if (data == 0)
			t->right = nullptr;
		else {
			t->right = new TNode1;
			t->right->data = data;
			t->right->left = t->right->right = NULL;
			t->right->parent = t;
			q.push(t->right);
			
		}

	}
	return BT;
}
//
//先序遍历,非递归
void PreorderTraversal11(BinTree1 BT)
{
	
	stack<BinTree1> s;
	while (BT || !s.empty())
	{
		while (BT)
		{
			cout << BT->data << " ";
			s.push(BT);
			
			BT = BT->left;
		}
		if (!s.empty())
		{
			BT = s.top();
			s.pop();
			BT = BT->right;
		}
	}
}
//中序遍历,非递归
void orderTraversal11(BinTree1 BT)
{

	stack<BinTree1> s;
	while (BT || !s.empty())
	{
		while (BT)
		{
			
			s.push(BT);

			BT = BT->left;
		}
		if (!s.empty())
		{
			BT = s.top();
			s.pop();
			cout << BT->data << " ";
			BT = BT->right;
		}
	}
}
//根据中序遍历改编，只需要用一个单链表保存中序遍历的节点，即可以找到后继节点
BinTree1 orderTraversal_find(BinTree1 root, BinTree1 bt)
{

	stack<BinTree1> s;
	list<BinTree1> l;//用一个单链表保存中序遍历的节点
	while (root || !s.empty())
	{
		while (root)
		{
			s.push(root);
			root = root->left;
		}
		if (!s.empty())
		{
			root = s.top();
			l.push_back(root);
			s.pop();
			root = root->right;
		}
	}
	for (auto it = l.begin(); it != l.end(); it++)
	{
		if ((*it)->data == bt->data)
		{
			if ((++it) == l.end())
				return nullptr;
			else
				return *(it);
		}

	}
}
//在二叉树中找到一个节点的后继节点
//【题目】 现在有一种新的二叉树节点类型如下：
//public class Node {
//	public int value; public Node left;
//	public Node right; public Node parent;
//	public Node(int data) { this.value = data; }
//}
//该结构比普通二叉树节点结构多了一个指向父节点的parent指针。假
//设有一 棵Node类型的节点组成的二叉树，树中每个节点的parent指针
//都正确地指向 自己的父节点，头节点的parent指向null。只给一个在
//二叉树中的某个节点 node，请实现返回node的后继节点的函数。在二
//叉树的中序遍历的序列中， node的下一个节点叫作node的后继节点。

//思路一;根据父节点，找到根，再进行中序遍历，找到后继节点
BinTree1 findSuccessorNode(BinTree1 bt)
{
	if (bt == nullptr)
		return nullptr;
	BinTree1 root = bt;
	//找到父节点
	while (root->parent!=nullptr)
		root = root->parent;
	//根据父节点和当前节点寻找后继节点
	return orderTraversal_find(root, bt);

}
int main()
{
	BinTree1 BT = createBinTree1();
	BinTree1 b = BT->right->right;

	if (findSuccessorNode(b) == nullptr)
		cout << "no successor:" << endl;
	else
		cout << "successor is :" << findSuccessorNode(b)->data << endl;

	return 0;
}
