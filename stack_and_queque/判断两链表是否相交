//两个单链表相交的一系列问题
//【题目】 在本题中，单链表可能有环，也可能无环。给定两个
//单链表的头节点 head1和head2，这两个链表可能相交，也可能
//不相交。请实现一个函数， 如果两个链表相交，请返回相交的
//第一个节点；如果不相交，返回null 即可。 要求：如果链表1
//的长度为N，链表2的长度为M，时间复杂度请达到 O(N+M)，额外
//空间复杂度请达到O(1)。
LinkList oneIsRing(LinkList head1, LinkList head2)
{
	LinkList p1 = head1;
	LinkList p2 = head2;
	int length1 = 0;
	int length2 = 0;
	while (p1->next != nullptr)
	{
		p1 = p1->next;
		length1++;
	}
	while (p2->next != nullptr)
	{
		p2 = p2->next;
		length2++;
	}
	if (p1 != p2)   //判断两个链表的尾端是否一致，如果不一致则不相交
		return nullptr;
	else {                //否则相交，计算两个链表的长度的差值，让长的链表先next到差值，再两链表逐个比较直到找到第一个相交的点为止
		p1 = length1 > length2 ? head1 : head2;
		p2 = p1 == head1 ? head2 : head1;
		int a = abs(length1 - length2);
		while (a-- > 0)
			p1 = p1->next;
		while (p1 != p2)
		{
			p1 = p1->next;
			p2 = p2->next;
		}
		return p1;
	}
}
LinkList bothIsRing(LinkList head1, LinkList head2)
{
	LinkList loop1 = isRing(head1);
	LinkList loop2 = isRing(head2);
	if (loop1 == loop2)//三种情况详见左神初级班4-1，2:29:31
	{
		LinkList p1 = head1;
		LinkList p2 = head2;
		int length1 = 0;
		int length2 = 0;
		while (p1->next != loop1)
		{
			p1 = p1->next;
			length1++;
		}
		while (p2->next != loop2)
		{
			p2 = p2->next;
			length2++;
		}
		              //否则相交，计算两个链表的长度的差值，让长的链表先next到差值，再两链表逐个比较直到找到第一个相交的点为止
		p1 = length1 > length2 ? head1 : head2;
		p2 = p1 == head1 ? head2 : head1;
		int a = abs(length1 - length2);
		while (a-- > 0)
			p1 = p1->next;
		while (p1 != p2)
		{
			p1 = p1->next;
			p2 = p2->next;
		}
		return p1;
	}
	else {
		LinkList cur1 = loop1;
		while (cur1 != loop1)
		{
			if (cur1 == loop2)
				return cur1;
			cur1 = cur1->next;
		}
		return nullptr;

	}
}


//判断两个链表是否相交，如果相交返回相交点，否则返回空
LinkList twoLinkListisRing(LinkList head1, LinkList head2)
{
	if (head1 == nullptr || head2 == nullptr)
		return nullptr;
	if (isRing(head1) == nullptr && isRing(head2) == nullptr)
		oneIsRing(head1, head2);  //当两个链表都没有环的时候
	else if (isRing(head1) != nullptr && isRing(head2) != nullptr)
		bothIsRing(head1,head2);//当链表有一个环时
	else  //当一个有环，一个没有环的时候不可能相交
		return nullptr;
}
int main()
{
	LinkList head1 = new Node;
	InitList(head1);
	CreateRingList(head1);

	LinkList head2 = new Node;
	InitList(head2);
	CreateRingList(head2);
	twoLinkListisRing(head1, head2);
	return 0;
}
