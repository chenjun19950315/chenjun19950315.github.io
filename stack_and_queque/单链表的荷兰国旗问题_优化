//优化要求:在原问题的要求之上再增加如下两个要求。
//在左、中、右三个部分的内部也做顺序要求，要求每部分里的节点从左 到右的
//顺序与原链表中节点的先后次序一致。 例如：链表9->0->4->5->1，pivot=3。
//调整后的链表是0->1->9->4->5。 在满足原问题要求的同时，左部分节点从左到
//右为0、1。在原链表中也 是先出现0，后出现1；中间部分在本例中为空，不再
//讨论；右部分节点 从左到右为9、4、5。在原链表中也是先出现9，然后出现4，
//最后出现5。
//如果链表长度为N，时间复杂度请达到O(N)，额外空间复杂度请达到O(1)。


//思路:设置三个链表，分别是小于，等于，大于pivot的链表，遍历整个链表，形成这三个小链表，最后串起这三个链表
void Listpartition(LinkList head1, char pivot)
{
	LinkList less = new Node;
	LinkList more = new Node;
	LinkList cur = new Node;
	LinkList less1 = less;
	LinkList more1 = more;
	LinkList cur1 = cur;
	LinkList less2 = less;
	LinkList more2 = more;
	LinkList cur2 = cur;
	LinkList p = head1;
	LinkList q = head1;
	while (p->next != nullptr) {
		p = p->next;
		if (p->data >pivot)
		{
			more->next = p;
			more = more->next;
		}
		else if (p->data < pivot)
		{
			less->next = p;
			less = less->next;
		}
		else
		{
			cur->next = p;
			cur = cur->next;
		}
	}
	more->next = nullptr;
	less->next = nullptr;
	cur->next = nullptr;
	while (less1->next != nullptr) {
		less1 = less1->next;
		head1->next = less1;
		head1 = head1->next;
	}
	while (cur1->next != nullptr) {
		cur1 = cur1->next;
		head1->next = cur1;
		head1 = head1->next;
	}
	while (more1->next != nullptr) {
		more1 = more1->next;
		head1->next = more1;
		head1 = head1->next;
	}
	

	head1->next = nullptr;
	
	DisplayList(q);
	free(less2);
	free(more2);
	free(cur2);
}
int main()
{
	LinkList head1=new Node;
	InitList(head1);
	CreateFromTail(head1);
	Listpartition(head1,'3');

	return 0;
}
